plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    // Applying the JaCoCo plugin
    id 'jacoco'
}

group = 'com.shshetudev'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core:4.6.1'
}

tasks.named('test') {
    useJUnitPlatform()
}

////////////////////////////////////////
/// JaCoCo
////////////////////////////////////////
// jacoco version
jacoco {
    toolVersion = "0.8.8"
}

// Defining dependencies between code coverage reports and test execution
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    // todo: Uncomment it for enforcing test coverage verification while testing
//    finalizedBy(jacocoTestCoverageVerification) // if test coverage is not upto the mark, build will fail
}

// Configuring Jacoco plugin
jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

// Configuring test task
jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    // todo: uncomment to watch
    // Excluding classes from html report
    // We can either use this
    // or add @Generated annotation over a class or method. First we have to make @Generated annotation.
    // @Generated annotation will work from gradle tool version: 0.8.2

//    afterEvaluate {
//        classDirectories.setFrom(files(classDirectories.files.collect {
//            fileTree(dir: it, exclude: [
//                    "com/shshetudev/flightmgmtapp/airport/Airport.java",
////                    "com/shshetudev/**/Airport.class",
////                    "com/shshetudev/**/*DTO.*",
////                    "**/config/*"
//            ])
//        }))
//    }
}

// Configuring violation rules
jacocoTestCoverageVerification {
    violationRules {

        // global rule
        rule {
            limit {
                minimum = 1.0
            }
            // Exclude class from this rule
//            excludes = [
//                    "com.shshetudev.flightmgmtapp.FlightMgmtAppApplication"
//            ]
        }

        // We can re-enforce the coverage rule for a specific class by adding to includes
//        rule {
//            enabled = false
//            element = 'CLASS'
//
//            includes = ['org.gradle.*']
//
//            // TOTALCOUNT: total number of items
//            limit {
//                counter = 'LINE'
//                value = 'TOTALCOUNT'
//                maximum = 0.3
//            }
//        }
    }
}

// todo: uncomment to watch
// Excluding code generated by Lombok
//lombok.addLombokGeneratedAnnotation = true